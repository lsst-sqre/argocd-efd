chronograf:
  ## Image Settings
  ##
  image:
    repository: "quay.io/influxdb/chronograf"
    tag: "1.8.8"
    pullPolicy: IfNotPresent

  ## Specify a service type
  ## ClusterIP is default
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    replicas: 1
    type: ClusterIP

  ## Persist data to a persistent volume
  ##
  persistence:
    enabled: true
    ## chronograf data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: nfs-path
    accessMode: ReadWriteOnce
    size: 50Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 1024Mi
      cpu: 1
    limits:
      memory: 16Gi
      cpu: 4

  ## Configure the ingress object to hook into existing infastructure
  ## ref : http://kubernetes.io/docs/user-guide/ingress/
  ## OPTIONALLY you can set .Values.ingress.secretName to set which secret to use
  ##
  ingress:
    enabled: true
    tls: true
    secretName: tls-certs
    hostname: lsst-chronograf-nts-efd.ncsa.illinois.edu
    annotations:
      kubernetes.io/ingress.class: "nginx"
      # kubernetes.io/tls-acme: "true"

  ## OAuth Settings for OAuth Providers
  oauth:
    # Need to set to true to use any of the oauth options
    enabled: true
    ## Assumes that a kubernetes secret named chronograf-oauth
    ## exists and contains the required secrets to configure the
    ## GH OAuth Provider: token_secret, gh_client_id,
    ## gh_client_secret and gh_orgs.
    existingSecret: chronograf-oauth
    github:
      enabled: true

  ## Extra environment variables that will be passed onto deployment pods
  env:
    HOST_PAGE_DISABLED: true
  

## Environment where the EFD is deployed
env: ncsa-teststand
